trigger:
  - main

resources:
  - repo: self

variables:
  - group: "ArgoCD_AKS_VG"

pool:
  name: "myagent"

stages:
  - stage: SonarQube_Scan
    displayName: "SonarQube Code Analysis"
    jobs:
      - job: SonarQube_Scan_Job
        displayName: "Run SonarQube Scan"
        steps:
          - task: SonarQubePrepare@7
            inputs:
              SonarQube: "sonar_sc"
              scannerMode: "cli"
              configMode: "manual"
              cliProjectKey: "$(sonarProjectKey)"
              cliProjectName: "VoteApp"
              cliSources: "."
              extraProperties: |
                sonar.host.url=$(sonarHostUrl)
                sonar.token=$(sonarToken)
          - task: SonarQubeAnalyze@7
            inputs:
              jdkversion: "JAVA_HOME_17_X64"
          - task: SonarQubePublish@7
            inputs:
              pollingTimeoutSec: "300"

  - stage: Trivy_FS_Scan
    displayName: "Trivy File System Scan"
    jobs:
      - job: Trivy_FS_Scan_Job
        displayName: "Trivy FS Scan Job"
        steps:
          - script: "trivy fs --format table -o trivy-fs.html ."
            displayName: "Trivy FS Scan"

  - stage: Build
    displayName: "Build Images"
    jobs:
      - job: Build
        displayName: "Build Images Job"
        steps:
          - script: |
              services=("vote" "db" "redis" "worker" "result")
              for service in "${services[@]}"; do
                docker build -t $(containerRegistry)/$(imageRepository)-$service:$(tag) -f $service/Dockerfile .
              done
            displayName: "Build All Images"

  - stage: Trivy_Image_Scan
    displayName: "Trivy Image Scan"
    jobs:
      - job: Trivy_Image_Scan_Job
        displayName: "Trivy Image Scan Job"
        steps:
          - script: |
              services=("vote" "db" "redis" "worker" "result")
              for service in "${services[@]}"; do
                trivy image --severity HIGH,CRITICAL --ignore-unfixed --format table $(containerRegistry)/$(imageRepository)-$service:$(tag)
              done
            displayName: "Scan All Images (Allow HIGH/CRITICAL)"

  - stage: Push
    displayName: "Push Images to ACR"
    jobs:
      - job: Push
        displayName: "Push Images Job"
        steps:
          - script: |
              services=("vote" "db" "redis" "worker" "result")
              for service in "${services[@]}"; do
                docker push $(containerRegistry)/$(imageRepository)-$service:$(tag)
              done
            displayName: "Push All Images"

  - stage: Update_Manifests
    displayName: "Update Kubernetes Manifests"
    jobs:
      - job: Update_Manifests_Job
        displayName: "Modify YAML files to reference new images"
        steps:
          - script: |
              files=("vote-deployment.yaml" "db-deployment.yaml" "redis-deployment.yaml" "worker-deployment.yaml" "result-deployment.yaml")
              for file in "${files[@]}"; do
                sed -i "s|image:.*|image: $(containerRegistry)/$(imageRepository):$(tag)|" k8s-specifications/$file
              done

              git config --global user.email "pavank839@outlook.com"
              git config --global user.name "Pavan K"
              git add k8s-specifications/*.yaml
              git commit -m "Updated db deployment image to $(containerRegistry)/$(imageRepository):$(tag)"
              git remote set-url origin https://$(token)@dev.azure.com/pavank839/ArgoCD_AKS_Project/_git/ArgoCD_AKS_Project
              git push origin HEAD:$(Build.SourceBranchName)
            displayName: "Update Kubernetes Deployment Images"
