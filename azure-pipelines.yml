trigger:
  branches:
    include:
      - main
    exclude:
      - 'k8s-specifications/*' 

resources:
  - repo: self

variables:
  - group: "ArgoCD_AKS_VG"

pool:
  name: "myagent"

stages:
  - stage: SonarQube_Scan
    displayName: "SonarQube Code Analysis"
    jobs:
      - job: SonarQube_Scan_Job
        displayName: "Run SonarQube Scan"
        steps:
          - task: SonarQubePrepare@7
            inputs:
              SonarQube: "sonar_sc"
              scannerMode: "cli"
              configMode: "manual"
              cliProjectKey: "$(sonarProjectKey)"
              cliProjectName: "VoteApp"
              cliSources: "."
              extraProperties: |
                sonar.host.url=$(sonarHostUrl)
                sonar.token=$(sonarToken)
          - task: SonarQubeAnalyze@7
            inputs:
              jdkversion: "JAVA_HOME_17_X64"
          - task: SonarQubePublish@7
            inputs:
              pollingTimeoutSec: "300"

  - stage: Trivy_FS_Scan
    displayName: "Trivy File System Scan"
    jobs:
      - job: Trivy_FS_Scan_Job
        displayName: "Trivy FS Scan Job"
        steps:
          - script: "trivy fs --format table -o trivy-fs.html ."
            displayName: "Trivy FS Scan"

  - stage: Build
    displayName: "Build All Images"
    jobs:
      - job: Build_Images
        displayName: "Build All Microservice Images"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-vote"
              command: "build"
              Dockerfile: "vote/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-redis"
              command: "build"
              Dockerfile: "redis/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-worker"
              command: "build"
              Dockerfile: "worker/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-result"
              command: "build"
              Dockerfile: "result/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)-postgresql'
              command: 'build'
              Dockerfile: 'postgreSQL/Dockerfile'
              tags: '$(tag)'

  - stage: Push
    displayName: "Push All Images To ACR"
    jobs:
      - job: Push_Images
        displayName: "Push All Microservice Images"
        steps:
          - script: |
              docker login demoacr839.azurecr.io -u $(dockerUsername) -p $(dockerPassword)
              images=(
                  "vote"
                  "postgresql"
                  "redis"
                  "worker"
                  "result"
              )

              for service in "${images[@]}"; do
                  docker tag demoacr839.azurecr.io/demorepo-$service:$(tag) demoacr839.azurecr.io/demorepo-$service:$(tag)
                  echo "Pushing demoacr839.azurecr.io/demorepo-$service:$(tag)"
                  docker push demoacr839.azurecr.io/demorepo-$service:$(tag)
              done
            displayName: "Push Images to ACR"


  - stage: Update_Manifests
    displayName: "Update Kubernetes Manifests"
    jobs:
      - job: Update_Manifests_Job
        displayName: "Modify YAML files to reference new image"
        steps:
          - script: |
              services=("vote" "postgresql" "redis" "worker" "result")
              
              for service in "${services[@]}"; do
                  echo "Updating image for $service"
                  sed -i "s|image:.*|image: demoacr839.azurecr.io/$(imageRepository)-$service:$(tag)|" "k8s-specifications/${service}-deployment.yaml"
              done

              git config --global user.email "pavank839@outlook.com"
              git config --global user.name "Pavan K"
              git add "k8s-specifications/*-deployment.yaml"
              git commit -m "Updated image tags for services to $(tag)"
              git remote set-url origin https://$(token)@dev.azure.com/pavank839/ArgoCD_AKS_Project/_git/ArgoCD_AKS_Project
              git push origin HEAD:$(Build.SourceBranchName)
            displayName: "Update Kubernetes Deployment Images"

