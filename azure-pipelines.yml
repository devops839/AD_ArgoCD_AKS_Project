trigger:
  - main

resources:
  - repo: self

variables:
  - group: "ArgoCD_AKS_VG"

pool:
  name: "myagent"

stages:
  - stage: SonarQube_Scan
    displayName: "SonarQube Code Analysis"
    jobs:
      - job: SonarQube_Scan_Job
        displayName: "Run SonarQube Scan"
        steps:
          - task: SonarQubePrepare@7
            inputs:
              SonarQube: "sonar_sc"
              scannerMode: "cli"
              configMode: "manual"
              cliProjectKey: "$(sonarProjectKey)"
              cliProjectName: "VoteApp"
              cliSources: "."
              extraProperties: |
                sonar.host.url=$(sonarHostUrl)
                sonar.token=$(sonarToken)
          - task: SonarQubeAnalyze@7
            inputs:
              jdkversion: "JAVA_HOME_17_X64"
          - task: SonarQubePublish@7
            inputs:
              pollingTimeoutSec: "300"

  - stage: Trivy_FS_Scan
    displayName: "Trivy File System Scan"
    jobs:
      - job: Trivy_FS_Scan_Job
        displayName: "Trivy FS Scan Job"
        steps:
          - script: "trivy fs --format table -o trivy-fs.html ."
            displayName: "Trivy FS Scan"

  - stage: Build
    displayName: "Build All Images"
    jobs:
      - job: Build_Images
        displayName: "Build All Microservice Images"
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-vote"
              command: "build"
              Dockerfile: "vote/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-redis"
              command: "build"
              Dockerfile: "redis/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-worker"
              command: "build"
              Dockerfile: "worker/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)-result"
              command: "build"
              Dockerfile: "result/Dockerfile"
              tags: "$(tag)"

          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)-postgreSQL'
              command: 'build'
              Dockerfile: 'postgreSQL/Dockerfile'
              tags: '$(tag)'

  - stage: Push
    displayName: "Push All Images To ACR"
    jobs:
      - job: Push_Images
        displayName: "Push All Microservice Images"
        steps:
          - script: |
              images=(
                  "vote"
                  "postgreSQL"
                  "redis"
                  "worker"
                  "result"
              )

              for service in "${images[@]}"; do
                  echo "Pushing $(imageRepository)-$service:$(tag)"
                  docker push "$(containerRegistry)/$(imageRepository)-$service:$(tag)"
              done
            displayName: "Push Images to ACR"

  - stage: Update_Manifests
    displayName: "Update Kubernetes Manifests"
    jobs:
      - job: Update_Manifests_Job
        displayName: "Modify YAML files to reference new image"
        steps:
          - script: |
              deployment_files=(
                  "k8s-specifications/vote-deployment.yaml"
                  "k8s-specifications/db-deployment.yaml"
                  "k8s-specifications/redis-deployment.yaml"
                  "k8s-specifications/worker-deployment.yaml"
                  "k8s-specifications/result-deployment.yaml"
              )

              for file in "${deployment_files[@]}"; do
                  sed -i "s|image:.*|image: $(containerRegistry)/$(imageRepository):$(tag)|" "$file"
              done

              git config --global user.email "pavank839@outlook.com"
              git config --global user.name "Pavan K"
              git add "${deployment_files[@]}"
              git commit -m "Updated deployment images to $(containerRegistry)/$(imageRepository):$(tag)"
              git remote set-url origin https://$(token)@dev.azure.com/pavank839/ArgoCD_AKS_Project/_git/ArgoCD_AKS_Project
              git push origin HEAD:$(Build.SourceBranchName)
            displayName: "Update Kubernetes Deployment Images"
